//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by Caleb Weinberger on 5/16/17.
//  Copyright Â© 2017 Caleb Weinberger. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    @IBOutlet weak var Output: UILabel!
    @IBOutlet weak var Time: UILabel!
    @IBOutlet weak var Enter: UITextField!
    @IBOutlet weak var lifeTime: UISlider!
    
    var theTime = 6 ;
    var timer1 = Timer();
    var timer2 = Timer();
    var val=0;
    let style = MSMessageTemplateLayout();
    let message = MSMessage();
    
    class Message
    {
        var duration = 0;
        var content = "";
        
        init(duration: Int, content: String)
        {
            self.duration = duration;
            self.content = content;
        }
        
        func getDuration() -> Int
        {
            return duration;
        }
        func getContent() ->  String
        {
            return content;
        }
        func toString() -> String
        {
            return "Duration: " + String(duration) + ", " + "Content: " + content;
        }
        
    }
    
    func createMessage() -> Message
    {
        let theMessage = Message(duration: Int(lifeTime.value), content:  String(describing: Enter.text));
        return theMessage;
    }
    
    func labelAction()
    {
        Output.text = "";
    }
    
    func timeAction()
    {
        theTime+=1;
        Time.text = String(theTime);

    }
    @IBAction func Input(_ sender: Any)
    {
        Output.text = Enter.text;
        style.caption = Enter.text;
        
        message.layout = style;
        message.shouldExpire = true;
        
        let theMessage = createMessage();
        print(theMessage.toString());
        activeConversation?.insert(message, completionHandler: nil);
        
        theTime = 6;
        
        timer2 = Timer.scheduledTimer(timeInterval: 1, target: self, selector: #selector(MessagesViewController.timeAction), userInfo: nil, repeats: true)
        
    }
    

    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
        timer1 = Timer.scheduledTimer(timeInterval: 10, target: self, selector: #selector(MessagesViewController.labelAction), userInfo: nil, repeats: false)
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
      
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
        
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
       
        
    }

}
